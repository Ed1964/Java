package com.javarush.task.task35.task3507;

import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.HashSet;
import java.util.Set;

/* 
ClassLoader - что это такое?
*/
public class Solution {
    public static void main(String[] args) throws IOException, NoSuchMethodException {
        Set<? extends Animal> allAnimals = getAllAnimals(Solution.class.getProtectionDomain().getCodeSource().getLocation().getPath() + Solution.class.getPackage().getName().replaceAll("[.]", "/") + "/data");
        System.out.println(allAnimals);
    }



    public static Set<? extends Animal> getAllAnimals(String pathToAnimals) throws IOException, NoSuchMethodException {

        Set<Animal> animals = new HashSet<>();

        File[] list = new File(pathToAnimals).listFiles();
        for(File file: list){

            if(file.isFile()&& file.getName().endsWith(".class")){

                String packageName = Solution.class.getPackage().getName() + ".data";
                Class clazz = new ClassFromPath().load(file.toPath(), packageName);

                if(Animal.class.isAssignableFrom(clazz)){
                    try{
                        clazz.getConstructor();
                        Animal animal = (Animal) clazz.newInstance();
                        animals.add(animal);
                    } catch (NoSuchMethodException e){
                    //нет конструктора без параметров
                    } catch (IllegalAccessException | InstantiationException e) {
                        e.printStackTrace();
                    }
                }
            }
        }
     return animals;
    }


    public static class ClassFromPath extends ClassLoader {
        public Class<?> load(Path path, String packageName) {
            try {
                String className = packageName + "." + path.getFileName().toString().replace(".class", "");
                byte[] b = Files.readAllBytes(path);
                return defineClass(className, b, 0, b.length); //here main magic
            } catch (IOException e) {
                e.printStackTrace();
            }
            return null;
        }
    }


}

