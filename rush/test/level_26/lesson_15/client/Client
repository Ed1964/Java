package com.javarush.task.task30.task3008.client;

import com.javarush.task.task30.task3008.Connection;
import com.javarush.task.task30.task3008.ConsoleHelper;
import com.javarush.task.task30.task3008.Message;
import com.javarush.task.task30.task3008.MessageType;

import java.io.IOException;
import java.net.Socket;
import java.net.UnknownHostException;

public class Client {

    protected Connection connection;
    private volatile boolean clientConnected = false;

    protected String getServerAddress(){
        return ConsoleHelper.readString();
    }

    protected int getServerPort(){
        return ConsoleHelper.readInt();
    }

    protected String getUserName(){
        return ConsoleHelper.readString();
    }

    protected boolean shouldSendTextFromConsole(){

        return true;
    }

    protected SocketThread getSocketThread(){
        return new SocketThread();
    }

    protected void sendTextMessage(String text){

        try {
            connection.send(new Message(MessageType.TEXT, text));
        } catch (IOException e) {
            clientConnected=false;
        }


    }

    public class SocketThread extends Thread {

        protected void processIncomingMessage(String message){
            ConsoleHelper.writeMessage(message);
        }

        protected void informAboutAddingNewUser(String userName){
            ConsoleHelper.writeMessage(userName + " присоединился к чату");
        }

        protected void informAboutDeletingNewUser(String userName){
            ConsoleHelper.writeMessage(userName + " покинул чат");
        }

        protected void notifyConnectionStatusChanged(boolean clientConnected){

            synchronized (Client.this) {
                Client.this.clientConnected = clientConnected;
                Client.this.notify();
            }

        }

        protected void clientHandshake() throws IOException, ClassNotFoundException{

            while (true){
                Message message = connection.receive();
                if(message.getType() == (MessageType.NAME_REQUEST)){
                    getUserName();
                    connection.send(new Message(MessageType.USER_NAME, getUserName()));
                }
                else if(message.getType() == (MessageType.NAME_ACCEPTED)){
                    notifyConnectionStatusChanged(true);
                    break;
                }
                else {
                    throw new IOException("Unexpected MessageType");
                }
            }
        }


        protected void clientMainLoop() throws IOException, ClassNotFoundException{

            while (true) {
                Message message = connection.receive();
                if (message.getType() == (MessageType.TEXT)) {
                    processIncomingMessage(message.getData());
                } else if (message.getType() == (MessageType.USER_ADDED)) {
                    informAboutAddingNewUser(message.getData());
                } else if (message.getType() == (MessageType.USER_REMOVED)) {
                    informAboutDeletingNewUser(message.getData());
                } else {
                    throw new IOException("Unexpected MessageType");
                }
            }
        }

        public void run(){

            try (Socket socket = new Socket(getServerAddress(), getServerPort())){
                    connection = new Connection(socket);
                    clientHandshake();
                    clientMainLoop();

            } catch (IOException | ClassNotFoundException e) {
                notifyConnectionStatusChanged(false);
            }
        }
    }

    public void run(){

        SocketThread  socketThread = getSocketThread();
        socketThread.setDaemon(true);
        socketThread.start();
        try {
            synchronized (this) {
                this.wait();
            }
        } catch (InterruptedException e) {
            ConsoleHelper.writeMessage("Возникло исключение. Выход из программы");
            return;
        }

        if (clientConnected){
            ConsoleHelper.writeMessage("Соединение установлено. Для выхода наберите команду 'exit'.");

            while (clientConnected){
                String message;
                if (!(message=ConsoleHelper.readString()).equals("exit")){
                    if(shouldSendTextFromConsole()){
                        sendTextMessage(message);
                    }
                }
                else return;
            }



        }
        else {
            ConsoleHelper.writeMessage("Произошла ошибка во время работы клиента.");
        }

    }


    public static void main(String[] args) {
        Client client = new Client();
        client.run();
    }

}
