package com.javarush.task.task30.task3008;

import com.javarush.task.task30.task3008.client.Client;

import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketAddress;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

public class Server {

    private static Map<String, Connection> connectionMap = new ConcurrentHashMap<>();

    public static void sendBroadcastMessage(Message message){
        for(Map.Entry<String, Connection> entry: connectionMap.entrySet()){

            try {
                entry.getValue().send(message);
            } catch (IOException e) {
                ConsoleHelper.writeMessage("Сообщение не отправлено");
            }
        }
    }

    private static class Handler extends Thread {
        private Socket socket;

        public Handler(Socket socket) {
            this.socket = socket;
        }

        private String serverHandshake(Connection connection) throws IOException, ClassNotFoundException {


            while (true) {

                connection.send(new Message(MessageType.NAME_REQUEST));
                Message message = connection.receive();

                if (message.getType() == MessageType.USER_NAME) {

                    if (!message.getData().isEmpty() && message.getData()!=null) {

                        if (!connectionMap.containsKey(message.getData())) {

                            connectionMap.put(message.getData(), connection);

                            connection.send(new Message(MessageType.NAME_ACCEPTED));
                            ConsoleHelper.writeMessage(message.getData() + " принято");
                            return message.getData();
                        }
                    }

                }

            }

        }

        private void notifyUsers(Connection connection, String userName) throws IOException{

            for(Map.Entry<String, Connection> entry: connectionMap.entrySet())
            {
                if(!entry.getKey().equals(userName)) {
                    connection.send(new Message(MessageType.USER_ADDED, entry.getKey()));
                }
            }
        }


        private void serverMainLoop(Connection connection, String userName) throws IOException, ClassNotFoundException{

            while (true){


                Message message = connection.receive();
                // Если принятое сообщение – это текст (тип TEXT)
                if (message.getType() == MessageType.TEXT) {

                    String s = userName + ": " + message.getData();

                    Message formattedMessage = new Message(MessageType.TEXT, s);
                    sendBroadcastMessage(formattedMessage);
                } else {
                    ConsoleHelper.writeMessage("Error");
                }

            }
        }

        public void run(){
            ConsoleHelper.writeMessage("Установлено соединение с удаленным адресом " + socket.getRemoteSocketAddress());

            String userName = null;
            try (Connection connection = new Connection(socket)){
                userName = serverHandshake(connection);
                sendBroadcastMessage(new Message(MessageType.USER_ADDED, userName));
                notifyUsers(connection, userName);
                serverMainLoop(connection, userName);

            } catch (IOException | ClassNotFoundException e) {
                ConsoleHelper.writeMessage("Ошибка обмена данными с удаленным адресом");
            }

            if(userName!=null){
                connectionMap.remove(userName);
                sendBroadcastMessage(new Message(MessageType.USER_REMOVED, userName));
            }


            ConsoleHelper.writeMessage("Соединение с удаленным адресом закрыто");

        }



    }


    public static void main(String[] args) throws IOException {

        try(ServerSocket serverSocket = new ServerSocket(ConsoleHelper.readInt())){

            System.out.println("Сервер запущен");
            while (true){
                 Socket socket1 = serverSocket.accept();
                 new Handler(socket1).start();
                }
        }
        catch (Exception e){
                ConsoleHelper.writeMessage(e.getMessage());
        }




    }
}
