package com.javarush.task.task27.task2712;

import com.javarush.task.task27.task2712.ad.AdvertisementManager;
import com.javarush.task.task27.task2712.ad.NoVideoAvailableException;
import com.javarush.task.task27.task2712.kitchen.Order;
import com.javarush.task.task27.task2712.kitchen.TestOrder;
import com.javarush.task.task27.task2712.statistic.StatisticManager;
import com.javarush.task.task27.task2712.statistic.event.VideoSelectedEventDataRow;

import java.io.IOException;
import java.util.Observable;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.logging.Level;
import java.util.logging.Logger;

public class Tablet {

    private LinkedBlockingQueue<Order> queue;

    public void setQueue(LinkedBlockingQueue<Order> queue) {
        this.queue = queue;
    }



    public static java.util.logging.Logger logger = Logger.getLogger(Tablet.class.getName());



    @Override
    public String toString() {
        return "Tablet{number=" + number + "}";
    }

    private final int number;

    public Tablet(int number) {
        this.number = number;
    }


    public Order createOrder(){

        try {
            Order order = new Order(this);

            AdvertisementManager advertisementManager = new AdvertisementManager(order.getTotalCookingTime()*60);


            if(order.isEmpty()){
                return null;
            } else {
                queue.put(order);
                try {

                    advertisementManager.processVideos();
                } catch (NoVideoAvailableException e) {
                    logger.log(Level.INFO, "No video is available for the order " + order);
                }
                return order;
            }

        } catch (IOException | InterruptedException e) {
            logger.log(Level.SEVERE, "Console is unavailable.");
            return null;
        }
    }

    public void createTestOrder() throws IOException {
        try {
            TestOrder testOrder = new TestOrder(this);
            AdvertisementManager advertisementManager = new AdvertisementManager(testOrder.getTotalCookingTime()*60);

            if(testOrder.isEmpty()){
            //
            } else {
                 queue.put(testOrder);
                try {

                    advertisementManager.processVideos();
                } catch (NoVideoAvailableException e) {
                logger.log(Level.INFO, "No video is available for the order " + testOrder);
                }
            }

        } catch (IOException | InterruptedException e) {
            logger.log(Level.SEVERE, "Console is unavailable.");
        }
    }

}
