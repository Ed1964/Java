package com.javarush.task.task22.task2207;

import java.io.*;
import java.util.LinkedList;
import java.util.List;

/* 
Обращенные слова
*/
public class Solution {
    public static List<Pair> result = new LinkedList<>();

    public static void main(String[] args) throws IOException {

        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        String fileName = bufferedReader.readLine();
        BufferedReader bufferedReader1 = new BufferedReader(new FileReader(fileName));


        StringBuilder strB = new StringBuilder();
        String str;

        while ((str = bufferedReader1.readLine()) != null){
            strB.append(str + " ");
        }
        String strings = strB.toString().trim();
//        System.out.println(strings);
        String[] arr = strings.split(" ");


        for(int i = 0; i < arr.length; i++){
            for(int j = i+1; j < arr.length; j++){
                Pair pair = new Pair();
                pair.first = arr[i];
                String hh = arr[j];
                StringBuilder sec = new StringBuilder().append(hh);
                pair.second = sec.reverse().toString();
                if(pair.first.equals(pair.second) && !result.contains(pair)){
                    pair.second = hh;
                        result.add(pair);
                }
            }
        }

        for(Pair pair:result){
            System.out.println(pair);
        }


    }

    public static class Pair {
        String first;
        String second;

        public Pair() {
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            Pair pair = (Pair) o;

            if (first != null ? !first.equals(pair.first) : pair.first != null) return false;
            return second != null ? second.equals(pair.second) : pair.second == null;

        }

        @Override
        public int hashCode() {
            int result = first != null ? first.hashCode() : 0;
            result = 31 * result + (second != null ? second.hashCode() : 0);
            return result;
        }

        @Override
        public String toString() {
            return  first == null && second == null ? "" :
                        first == null ? second :
                            second == null ? first :
                                first.compareTo(second) < 0 ? first + " " + second : second + " " + first;

        }
    }

}
