package com.javarush.task.task35.task3513;

import java.util.*;
import java.util.concurrent.atomic.AtomicBoolean;

public class Model {

    private static final int FIELD_WIDTH = 4;
    private Tile[][] gameTiles;
    int score = 0;
    int maxTile = 0;
    private Stack<Tile[][]> previousStates = new Stack<>();
    private Stack<Integer> previousScores = new Stack<>();
    private boolean isSaveNeeded = true;
    private PriorityQueue<MoveEfficiency> priorityQueue;



    public Model() {
        resetGameTiles();
    }



    private List<Tile> getEmptyTiles(){
        List<Tile> arrayList = new ArrayList<>();
        for(int i = 0; i < FIELD_WIDTH; i++){
            for(int j = 0; j < FIELD_WIDTH; j++){
                if(gameTiles[i][j].value == 0){
                    arrayList.add(gameTiles[i][j]);
                }
            }
        }
        return arrayList;
    }

    private void addTile(){

        List<Tile> tiles = getEmptyTiles();
        if(!tiles.isEmpty()) {
            int i = (int) (tiles.size() * Math.random());
            tiles.get(i).value = (Math.random() < 0.9) ? 2 : 4;
        }

    }

    public Tile[][] getGameTiles() {
        return gameTiles;
    }

    void resetGameTiles(){

        gameTiles = new Tile[FIELD_WIDTH][FIELD_WIDTH];
        for(int i = 0; i < FIELD_WIDTH; i++){
            for(int j = 0; j < FIELD_WIDTH; j++){
                gameTiles[i][j] = new Tile();
            }
        }
        addTile();
        addTile();

    }

    private boolean compressTiles(Tile[] tiles){
        boolean changes = false;
        for (int i = 0; i < tiles.length; i++) {
            if (tiles[i].value == 0 && i < tiles.length - 1 && tiles[i + 1].value != 0) {

                Tile temp = tiles[i];
                tiles[i] = tiles[i + 1];
                tiles[i + 1] = temp;
                i = -1;
                changes = true;
            }
        }
        return changes;

    }

    private boolean mergeTiles(Tile[] tiles){
        boolean changes = false;
        for (int i = 0; i < tiles.length - 1; i++) {
            if (tiles[i].value != 0 && (tiles[i].value == tiles[i + 1].value)) {
                if (tiles[i].value + tiles[i + 1].value > maxTile) {
                    maxTile = tiles[i].value + tiles[i + 1].value;
                }
                tiles[i].value = tiles[i].value + tiles[i + 1].value;
                score += tiles[i].value;
                tiles[i + 1].value = 0;
                changes = true;
                compressTiles(tiles);
            }
        }
        return changes;

    }

    public  void  left(){
        if(isSaveNeeded){
            saveState(gameTiles);
        }
        boolean isChanged = false;
        for (int i = 0; i < FIELD_WIDTH; i++) {
            if (compressTiles(gameTiles[i]) | mergeTiles(gameTiles[i])) {
                isChanged = true;
            }
        }
        if (isChanged) addTile();
        isSaveNeeded = true;
    }

    public void rotate (Tile[][] mat) {
        Tile[][] tmp = new Tile[FIELD_WIDTH][FIELD_WIDTH];
        int ix = 0;
        int jx = 0;
        for (int j = 0; j < FIELD_WIDTH; j++) {
            for (int i = FIELD_WIDTH - 1; i >= 0; i--) {
                tmp[ix][jx] = gameTiles[i][j];
                jx++;
            }
            ix++;
            jx = 0;
        }
        for (int i = 0; i < FIELD_WIDTH; i++) {
            System.arraycopy(tmp[i], 0, gameTiles[i], 0, FIELD_WIDTH);
        }

    }

    public  void  down(){
        saveState(gameTiles);
        rotate(gameTiles);
        left();
        rotate(gameTiles);
        rotate(gameTiles);
        rotate(gameTiles);
    }

    public  void  up(){
        saveState(gameTiles);
        rotate(gameTiles);
        rotate(gameTiles);
        rotate(gameTiles);
        left();
        rotate(gameTiles);

    }

    public  void  right(){
        saveState(gameTiles);
        rotate(gameTiles);
        rotate(gameTiles);
        left();
        rotate(gameTiles);
        rotate(gameTiles);

    }

    public boolean canMove(){
        if (!getEmptyTiles().isEmpty()) {
            return true;
        }
        for (int i = 0; i < gameTiles.length; i++) {
            for (int j = 0; j < gameTiles.length - 1; j++) {
                if (gameTiles[i][j].value == gameTiles[i][j + 1].value) {
                    return true;
                }
            }
        }
        for (int j = 0; j < gameTiles.length; j++) {
            for (int i = 0; i < gameTiles.length - 1; i++) {
                if (gameTiles[i][j].value == gameTiles[i + 1][j].value) {
                    return true;
                }
            }
        }
        return false;

    }

    private void saveState(Tile[][] tiles){
        Tile[][] newTiles = new Tile[tiles.length][tiles.length];

        for(int i = 0; i < newTiles.length; i++){
            for(int j = 0; j < newTiles.length; j++){
                newTiles[i][j] = new Tile(tiles[i][j].value);
            }
        }

        previousStates.push(newTiles);
        previousScores.push(score);
        isSaveNeeded = false;

    }

    public void rollback(){

        if(!previousScores.empty() && !previousStates.empty()){
            gameTiles = previousStates.pop();
            score = previousScores.pop();
        }

    }

    public void randomMove(){
        int n = ((int) (Math.random() * 100)) % 4;
        if (n == 0) {
            left();
        } else if(n==1){
            right();
        } else if( n==2){
        up();
        } else if( n==3){
            down();
        }
    }

    public boolean hasBoardChanged(){
        boolean weightGameTiles = false;
        for (int i = 0; i < gameTiles.length; i++) {
            for (int j = 0; j < gameTiles.length ; j++) {
                if(gameTiles[i][j].value != previousStates.peek()[i][j].value){
                    weightGameTiles = true;
                }
            }
        }
        return weightGameTiles;
    }

    public MoveEfficiency getMoveEfficiency(Move move){
        MoveEfficiency moveEfficiency = null;

        move.move();
        if(!hasBoardChanged()){
            moveEfficiency = new MoveEfficiency(-1, score, move);
        } else moveEfficiency = new MoveEfficiency(getEmptyTiles().size(), score, move);

        rollback();
        return moveEfficiency;
    }

    public  void  autoMove(){

        priorityQueue = new PriorityQueue<MoveEfficiency>(4, Collections.reverseOrder());
        priorityQueue.offer(getMoveEfficiency(this::left));
        priorityQueue.offer(getMoveEfficiency(this::right));
        priorityQueue.offer(getMoveEfficiency(this::up));
        priorityQueue.offer(getMoveEfficiency(this::down));
        priorityQueue.peek().getMove().move();

    }

}
