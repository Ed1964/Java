package com.javarush.task.task17.task1711;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Locale;

/* 
CRUD 2
*/

public class Solution {
    public static volatile List<Person> allPeople = new ArrayList<Person>();

    static {
        allPeople.add(Person.createMale("Иванов Иван", new Date()));  //сегодня родился    id=0
        allPeople.add(Person.createMale("Петров Петр", new Date()));  //сегодня родился    id=1
    }

    public static void main(String[] args) throws ParseException {
        //start here - начни тут
        switch (args[0]) {

            case "-c":

                synchronized (allPeople) {

                    for (int i = 1; i < args.length; i = i + 3) {
                        if (args[i + 1].equals("м")) {
                            allPeople.add(Person.createMale(args[i],
                                    new SimpleDateFormat("dd/MM/yyyy", Locale.ENGLISH).parse(args[i + 2])));
                        }
                        if (args[i + 1].equals("ж")) {
                            allPeople.add(Person.createFemale(args[i],
                                    new SimpleDateFormat("dd/MM/yyyy", Locale.ENGLISH).parse(args[i + 2])));
                        }

                        //        synchronized (allPeople);
                        System.out.println((allPeople.size() - 1));
                    }
                }

                break;

            case "-u":
                synchronized (allPeople) {
                    for (int i = 1; i < args.length; i = i + 4) {
                        int id = Integer.parseInt(args[i]);
                        if (id >= 0 && id < allPeople.size()) {
                            Person pers2 = allPeople.get(id);
                            pers2.setName(args[i + 1]);

                            if (args[i + 2].equals("м")) {
                                pers2.setSex(Sex.MALE);
                            }
                            if (args[i + 2].equals("ж")) {
                                pers2.setSex(Sex.FEMALE);
                            }
                            pers2.setBirthDate(new SimpleDateFormat("dd/MM/yyyy", Locale.ENGLISH).parse(args[i + 3]));
                        }
                    }
                }
                break;


            case "-d":
                synchronized (allPeople) {
                    for (int i = 1; i < args.length; i = i + 1) {

                        int id1 = Integer.parseInt(args[i]);
                        if (id1 >= 0 && id1 < allPeople.size()) {
                            Person pers3 = allPeople.get(id1);
                            pers3.setName(null);
                            pers3.setSex(null);
                            pers3.setBirthDate(null);
                        }
                    }
                }
                break;


            case "-i":
                synchronized (allPeople) {
                    for (int i = 1; i < args.length; i = i + 1) {

                        Person pers4 = allPeople.get(Integer.parseInt(args[i]));
                        System.out.print(pers4.getName() + " ");
                        if (pers4.getSex().equals(Sex.MALE)) {
                            System.out.print("м ");
                        }
                        if (pers4.getSex().equals(Sex.FEMALE)) {
                            System.out.print("ж ");
                        }
                        System.out.println((new SimpleDateFormat("dd-MMM-yyyy", Locale.ENGLISH).format(pers4.getBirthDate())) + " ");
                    }
                }
                break;
        }

    }
}
